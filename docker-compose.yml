services:
  # spring backend server
  backend_server:
    container_name: backend_server
    depends_on:
      - backend_redis
      - backend_rabbitmq
    restart: on-failure
    build:
      context: ./backend/
      dockerfile: dockerfile
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      REDIS_HOST: backend_redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: backend_rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}


  # python for gpt server
  backend_python:
    container_name: backend_python
    depends_on:
      - backend_rabbitmq
      - backend_server
    restart: unless-stopped
    build:
      context: ./gpt/
      dockerfile: dockerfile
    ports:
      - "127.0.0.1:5000:5000"
    environment:
      RABBITMQ_HOST: backend_rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

  # redis
  backend_redis:
    container_name: backend_redis
    image: redis
    ports:
      - "0.0.0.0:6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_config:/usr/local/etc/redis
      - redis_data:/data
  
  # rabbitMQ
  backend_rabbitmq:
    container_name: backend_rabbitmq
    image: rabbitmq
    ports:
    - "127.0.0.1:5672:5672"
    - "127.0.0.1:15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_config:/etc/rabbitmq/conf.d

volumes:
  redis_config:
  redis_data:
  rabbitmq_config:
